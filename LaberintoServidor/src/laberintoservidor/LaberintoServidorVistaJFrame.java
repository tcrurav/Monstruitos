/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laberintoservidor;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author Tiburcio
 */
public class LaberintoServidorVistaJFrame extends javax.swing.JFrame implements LaberintoServidorVista {
    private int ancho;
    private int alto;
    private int margen;
    private final LaberintoServidorVistaCanvas laberintoCanvas;
    private LaberintoServidorPresentador presentador;
    
    /**
     * Creates new form LaberintoVistaJFrame
     */
    public LaberintoServidorVistaJFrame() {        
        initComponents();
        laberintoCanvas = new LaberintoServidorVistaCanvas();
        laberintoCanvas.setListener(this);
    }
    
    @Override
    public void setDimensiones(int alto, int ancho, int margen){
        this.ancho = ancho;
        this.alto = alto;
        this.margen = margen;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(LaberintoVistaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(LaberintoVistaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(LaberintoVistaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(LaberintoVistaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LaberintoVistaJFrame().setVisible(true);
//            }
//        });
//    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {   
        mostrarLaberintoVacio();
        setVisible(true);
    }

    @Override
    public void limpiarCanvas(){
        Graphics g = laberintoCanvas.getGraphics();
        g.clearRect(0, 0, laberintoCanvas.getWidth(), laberintoCanvas.getHeight());
    }
    
    @Override
    public void mostrarJugador(int x, int y, String ficheroImagen) {
        Graphics g = laberintoCanvas.getGraphics();
        Image imagen = new ImageIcon("images/" + ficheroImagen).getImage();
        g.drawImage(imagen, x, y, 50, 50, this);
    }

    public void mostrarLaberintoVacio() {
        Dimension dimension = new Dimension(ancho + 2 * margen, alto + 2 * margen);
        getContentPane().setPreferredSize(dimension);
        pack();
        
        setLocationRelativeTo(null);

        laberintoCanvas.setSize(ancho, alto);
        laberintoCanvas.setBackground(Color.yellow);
        
        add(laberintoCanvas);
        
        laberintoCanvas.setLocation(margen, margen);
        
        this.setResizable(false);
    }
    
    @Override
    public void setPresentador(LaberintoServidorPresentador presentador) {
        this.presentador = presentador;
    }

    @Override
    public void onRepaint() { // Me lo inventé yo para hacerlo más ordenador (aunque más complejo)
        if(presentador != null){
            presentador.mostrarJugadores();
        }
    }
}
